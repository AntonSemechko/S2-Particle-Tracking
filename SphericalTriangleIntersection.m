function [Tuvw,Tuv]=SphericalTriangleIntersection(TR,D,a_thr,BS)
% Given a set of rays, D, emanating from the origin, and a triangular 
% surface mesh of a unit sphere, find mesh triangles intersected by D, 
% as well as spherical and/or planar barycentric coordinates of the points
% of intersection. 
%
% INPUT:
%   - TR    : spherical mesh represented as an object of 'TriRep' class,
%             'triangulation' class, or a cell such that TR={Tri,V}, where
%             Tri is an M-by-3 array of faces and V is an N-by-3 array of 
%             vertex coordinates.
%             -------------------------- IMPORTANT------------------------- 
%             Counter-clockwise orientation of mesh triangles is assumed
%             (i.e., normals pointing towards exterior of the surface).
%             -------------------------------------------------------------
%   - D    :  M-by-3 array of ray direction vectors emanating from the 
%             origin, where M is the total number of rays. Alternatively, D
%             can be thought of as points lying on the surface of a 
%             (zero-centered) unit sphere.   
%   - a_thr : optional input argument. a_thr is an angle threshold (in
%             degrees) used to speed up the search of intersection 
%             candidates. a_thr=30 is the default setting.
%   - BS    : optional input argument. BS is a structure generated by the 
%             'BinSphericalTriangles' function using TR as input. The 
%             purpose of BS is to reduce the run-time 
%             'SphericalTriangleIntersection' when calling the function 
%             repeatedly with the same TR, but different D. 
%
% OUTPUT:
%   - Tuvw  : M-by-4 array containing the following information:
%              - 1st column corresponds to the indices of the triangles
%                intersected by the queried rays/points in D 
%              - 2nd, 3rd and 4th columns are the spherical barycentric 
%                coordinates of the queried rays/points in D
%             Thus, i-th ray D(i,:) intersects spherical triangle 
%             Tuvw(i,1), and spherical barycentric coordinates of this 
%             point are u=Tuvw(i,2), v=Tuvw(i,3), and w=Tuvw(i,4), such 
%             that D(i,:)=u*P1 + v*P2 + w*P3, where P1, P2 and P3 are the 
%             vertices of the triangle Tuvw(i,1). Note that unlike planar 
%             barycentric coordinates, u+v+w>=1.
%   - Tuv   : M-by-3 array containing a list of triangles intersected by D
%             (1st column) and planar barycentric coordinates of the points
%             of intersection (2nd and 3rd columns). For example, 
%             ray D(i,:) intersects triangle Tuv(i,1) and the barycentric
%             coordinates of the point of intersection are u=Tuv(i,2) and
%             v=Tuv(i,3) (note: w=1-u-v). To compute the point of 
%             intersection (P) explicitly use the following formula: 
%             P=(1-u-v)*P1 + u*P2 + v*P3, where P1, P2 and P3 are the 
%             coordinates of the triangle vertices.

%
% REFERENCES:
% [1] Langer, T., Belyaev, A., Seidel, H-P. (2006) 'Spherical barycentric 
%     coordinates', In Proceedings of the 4th Eurographics Symposium on
%     Geometry Processing (SGP 2006), pp.81–88. 
% [2] Möller, T., Trumbore, B. (1997) 'Fast, minimum storage ray-triangle 
%     intersection', Journal of Graphics Tools, Vol. 2, pp. 21-28.
%
% AUTHOR: Anton Semechko (a.semechko@gmail.com)
%


if nargin<2 || size(D,2)~=3 || ~ismatrix(D)
    error('Invalid format for 2nd input argument (D)')
end

if nargin<3 || isempty(a_thr)
    a_thr=30;
elseif numel(a_thr)~=1 || ~isa(a_thr,'double') || a_thr<eps  %|| a_thr>90
    error('a_thr must be a positive real number < 90');
end

% Face and vertex lists
[Tri,V,fmt]=GetMeshData(TR);
    
% For each ray determine the face it intersects as well as the spherical 
% barycentric coordinates of the point of intersection
%--------------------------------------------------------------------------

% Assign points to bins
flag_BS=false;
M=size(D,1);  % number of rays
if nargin>3 && ~isempty(BS) && isstruct(BS) && isfield(BS,'BinFaceList')    
    Bidx=AssignSphericalBins(BS.grid_size,D);        
    FN=BS.normals;    
    VA=BS.VA;
    a_thr=BS.a_thr; 
    if numel(a_thr)>1, a_thr=max(a_thr); end 
    flag_BS=true;
else
    
    % Vertex attachments and face normals
    if fmt>1, TR=triangulation(Tri,V); end
    VA=vertexAttachments(TR)';
    FN=V(Tri(:,1),:)+V(Tri(:,2),:)+V(Tri(:,3),:);
    FN=ProjectOnSn(FN);
    
end

% Loop through all rays/points
a_thr=a_thr*(pi/180);
d_thr=a_thr^2; 
Tuvw=NaN*ones(M,4);
if ~flag_BS % no BinStruct available
    
    for i=1:M % runs much faster with 'parfor' if called from command window, but for some reason slows down if called by another function 
        
        % Mesh vertices within a_thr radians of the i-th ray
        D_v2i=sum(bsxfun(@minus,V,D(i,:)).^2,2);        
        idx=D_v2i<=d_thr;
        DA=D_v2i(idx);
        if numel(DA)<3 
            d_thr=sort(D_v2i,'ascend');
            d_thr=1.001*d_thr(4);   
            idx=D_v2i<=d_thr;
            DA=D_v2i(idx);
        end
        idx_vo=find(idx);
        
        % Three closest vertices
        [~,id_srt]=sort(DA,'ascend');
        idx_v=idx_vo(id_srt(1:3));
        
        % Faces attached to idx_v
        idx_f=cell2mat(VA(idx_v));
        idx_f=unique(idx_f);
        
        % Sort faces in decreasing order of proximity to the ray based on their normals
        [~,id_srt]=sort(FN(idx_f,:)*D(i,:)','descend');
                
        % Loop through all eligible faces to find one intersected by the i-th ray
        [Tuvw(i,:),de]=BarCoord(idx_f(id_srt),D(i,:)',Tri,V);
        
        % No hits, repeat with all faces attached to idx_vo
        if isnan(Tuvw(i,1))
            idx_f2=unique(cell2mat(VA(idx_vo)));
            %idx_f=ismember(idx_f2,idx_f);
            %idx_f2=idx_f2(~idx_f);
            [~,id_srt]=sort(FN(idx_f2,:)*D(i,:)','descend');
            Tuvw(i,:)=BarCoord(idx_f2(id_srt),D(i,:)',Tri,V,min(2*de,1E-2));
        end
        
    end
    
    % Planar barycentric coordinates
    if nargout>1
        Tuv=GetPlanarBCs(Tri,V,Tuvw(:,1),D);
        uv=Tuv(:,2:3);
        uv(uv<0)=0;
        uv(uv>1)=1;
        uv_net=sum(uv,2);
        idx=uv_net>1;
        if sum(idx)>0
            uv(idx,:)=bsxfun(@rdivide,uv(idx,:),uv_net(idx));
        end
        Tuv(:,2:3)=uv;
    end
    return
end


% BinStruct (i.e., BS) is available
A=BS.triangle_data.A;
detA=BS.triangle_data.detA;
c12=BS.triangle_data.c12;
for i=1:M
    
    % Get faces likely to intersect with the ray
    b_i=Bidx(i);               % bin containing i-th ray
    idx_f=BS.BinFaceList{b_i}; % faces in bin b_i
    if ~isempty(idx_f) 
        
        % Remove faces that do not intersect with the ray
        detAw=c12(idx_f,:)*D(i,:)';
        w=detAw./detA(idx_f);
        idx_vld=w>-1E-2;
        idx_f=idx_f(idx_vld);
        
        % Check intersection conditions for the remaining faces
        if ~isempty(idx_f)
            Tuvw(i,:)=BarCoord_BS(idx_f,D(i,:)',A(:,:,idx_f),detA(idx_f),w(idx_vld));            
        end        
        
    end
    
    % Bin did not contain any triangles that intersect with the ray
    if isnan(Tuvw(i,1))        
        CosA=V*D(i,:)';
        idx=CosA>=a_thr;
        idx_f2=unique(cell2mat(VA(idx)))';
        %idx_f=ismember(idx_f2,idx_f);
        %idx_f2=idx_f2(~idx_f);
        
        detAw=c12(idx_f2,:)*D(i,:)';
        w=detAw./detA(idx_f2);
        idx_vld=w>-1E-2;
        idx_f2=idx_f2(idx_vld);

        % This seems be a bit faster ...
        [~,id_srt]=sort(FN(idx_f2,:)*D(i,:)','descend');
        Tuvw(i,:)=BarCoord(idx_f2(id_srt),D(i,:)',Tri,V,1E-2);

        %disp([i Tuvw(i,:)])
        
        % ... than this
        %Tuvw(i,:)=BarCoord_BS(idx_f2,D(i,:)',A(:,:,idx_f2),detA(idx_f2),w(idx_vld));
    end

end

% Planar barycentric coordinates
if nargout>1
    
    T=Tuvw(:,1);
    det_M=-sum(BS.triangle_data.cAB(T,:).*D,2);
    u=-sum(BS.triangle_data.cCB(T,:).*D,2);
    v=-sum(BS.triangle_data.cAC(T,:).*D,2);
    uv=[u./det_M v./det_M];
    
    uv(uv<0)=0;
    uv(uv>1)=1;
    uv_net=sum(uv,2);
    idx=uv_net>1;
    if sum(idx)>0
        uv(idx,:)=bsxfun(@rdivide,uv(idx,:),uv_net(idx));
    end
    Tuv=[T uv];
end


%==========================================================================
function [Tuvw,de2,i]=BarCoord(idx,p,Tri,V,de)
% Find triangle intersected by ray p and spherical barycentric coordinates
% of the intersection point.

% Numerical tolerance for the barycentric coordinates
if nargin<5 || isempty(de)
    de=1E-12;
else
    de=abs(de);
end
de2=Inf;
    
% Loop through all eligible faces to find the one that yields +ve coords
Tuvw=nan(1,4); i=1;
if isempty(Tri), return; end
for i=1:numel(idx)
        
    A=V(Tri(idx(i),:),:)';
    detA=det(A);
    
    Au=A; Au(:,1)=p;
    ui=det(Au)/detA;
    if ui<-de
        de2=min(abs(ui),de2);
        continue
    end
    
    Av=A; Av(:,2)=p;
    vi=det(Av)/detA;
    if vi<-de
        de2=min(abs(vi),de2);
        continue
    end
    
    Aw=A; Aw(:,3)=p;
    wi=det(Aw)/detA;
    if wi<-de
        de2=min(abs(wi),de2);
        continue
    end
    
    % Save results and break the loop
    Tuvw=[idx(i),ui,vi,wi];
    break
    
end


function Tuvw=BarCoord_BS(T,p,A,detA,w)
% Find triangle intersected by ray p and spherical barycentric coordinates
% of the intersection point.

de=1E-2;
Tuvw=nan(1,4);

%sum(cross(p,A(:,2,:),1).*A(:,3,:),1);
detAu=(p(2)*A(3,2,:)-p(3)*A(2,2,:)).*A(1,3,:) + ...
      (p(3)*A(1,2,:)-p(1)*A(3,2,:)).*A(2,3,:) + ...
      (p(1)*A(2,2,:)-p(2)*A(1,2,:)).*A(3,3,:);
u=detAu(:)./detA;
idx=u>-de;

T=T(idx);
if isempty(T), return; end
A=A(:,:,idx);
detA=detA(idx);
w=w(idx);
u=u(idx);

%sum(cross(A(:,1,:),p,1).*A(:,3,:),1);
detAv=(A(2,1,:)*p(3)-A(3,1,:)*p(2)).*A(1,3,:) + ...
      (A(3,1,:)*p(1)-A(1,1,:)*p(3)).*A(2,3,:) + ...
      (A(1,1,:)*p(2)-A(2,1,:)*p(1)).*A(3,3,:);
v=detAv(:)./detA;
idx=v>-de;

T=T(idx);
if isempty(T), return; end
w=w(idx);
u=u(idx);
v=v(idx);

if numel(T)==1
    Tuvw=[T u v w];
else
    A=A(:,:,idx);
    p2=parallel_mat_multiply(A,[u v w]')';
    p2=ProjectOnSn(p2);
    d=sum(bsxfun(@minus,p2,p').^2,2);    
    [~,id]=min(d);
    Tuvw=[T(id) u(id) v(id) w(id)];
end
    

function Tuv=GetPlanarBCs(Tri,V,T,D)
% Planar barycentric coordinates of the points of intersection


Tri=Tri(T,:);

X1=V(Tri(:,1),:);
X2=V(Tri(:,2),:);
X3=V(Tri(:,3),:);

A=X2-X1;
B=X3-X1;
C=-X1;

% Compute DET_M
det_M=-sum(cross(A,B,2).*D,2);

% Solve for u
u=-sum(cross(C,B,2).*D,2);
u=u./det_M;

% Solve for v
v=-sum(cross(A,C,2).*D,2);
v=v./det_M;

Tuv=[T u v];

